<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>Josh Megnauth&#x27;s programming ramblings - Python</title>
	<subtitle>Rust, Linux, Python, and data</subtitle>
	<link href="https://joshuamegnauth54.github.io/tags/python/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://joshuamegnauth54.github.io"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2021-08-03T00:00:00+00:00</updated>
	<id>https://joshuamegnauth54.github.io/tags/python/atom.xml</id>
	<entry xml:lang="en">
		<title>Functions in Python III: Lambdas, closures, and other miscellanea</title>
		<published>2021-07-22T00:00:00+00:00</published>
		<updated>2021-08-03T00:00:00+00:00</updated>
		<link href="https://joshuamegnauth54.github.io/data_python/functions-part-three/" type="text/html"/>
		<id>https://joshuamegnauth54.github.io/data_python/functions-part-three/</id>
		<content type="html">&lt;p&gt;Part I of my functions tutorial covered the basics of writing functions including parameters and rudimentary error checking. Part III covers miscellaneous and intermediate features that I couldn’t shoehorn into part I (just being honest here).&lt;&#x2F;p&gt;
&lt;h1 id=&quot;docstrings&quot;&gt;Docstrings&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;lambdas&quot;&gt;Lambdas&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;closures&quot;&gt;Closures&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;decorators&quot;&gt;Decorators&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;args-and-kwargs&quot;&gt;Args and kwargs&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;scraping-azlyrics&quot;&gt;Scraping AZLyrics&lt;&#x2F;h1&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Functions in Python II: Evaluation strategy and mutability</title>
		<published>2021-07-13T00:00:00+00:00</published>
		<updated>2021-08-01T00:00:00+00:00</updated>
		<link href="https://joshuamegnauth54.github.io/data_python/functions-part-two/" type="text/html"/>
		<id>https://joshuamegnauth54.github.io/data_python/functions-part-two/</id>
		<content type="html">&lt;p&gt;Arguments are inputs that are passed into functions. But how are arguments passed? Do functions receive copies of arguments? Does Python pass references everywhere? What &lt;em&gt;is&lt;&#x2F;em&gt; a reference anyway?&lt;&#x2F;p&gt;
&lt;p&gt;Well, dear reader, let us delve into the crazy world of Python’s evaluation strategy.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;what-is-an-evaluation-strategy&quot;&gt;What is an evaluation strategy?&lt;&#x2F;h1&gt;
&lt;p&gt;An evaluation strategy outlines how arguments are passed into functions.&lt;&#x2F;p&gt;
&lt;p&gt;Programming languages such as Rust or C allow programmers to specifically label whether parameters are accepted by value or reference. Python, as well as other scripting languages, is opaque in terms of argument handling.&lt;&#x2F;p&gt;
&lt;p&gt;Python (and the rest) are designed around reducing the cognitive load on programmers. The tradeoff is that certain concepts are less immediate because scripting languages elide complexity. Python’s evaluation strategy &lt;em&gt;feels&lt;&#x2F;em&gt; a bit quirky even though it’s Spartan, like the language tends to be in general.&lt;&#x2F;p&gt;
&lt;p&gt;Argument semantics is fundamentally an issue of ownership and where data live in memory. Data may be created in one location but need to be accessed in another location. Those variables may need to be modified (mutated) as well.&lt;&#x2F;p&gt;
&lt;p&gt;For example, take a look at this small script displays an &lt;a href=&quot;https:&#x2F;&#x2F;xkcd.com&quot;&gt;xkcd&lt;&#x2F;a&gt; comic using &lt;a href=&quot;https:&#x2F;&#x2F;pillow.readthedocs.io&#x2F;en&#x2F;stable&#x2F;&quot;&gt;Pillow&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;requests &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;session
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;PIL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Image
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;io

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;XKCD_URL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;xkcd.com&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&#x2F;info.0.json&amp;quot;


&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;pull_xkcd_comic&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;comic_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;):
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Ignoring error handling for brevity

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;sess:
        xkcd_json &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;sess&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(XKCD_URL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(comic_id))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;()
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;print_xkcd_metadata&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(xkcd_json)

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Retrieve and return image data as bytes
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;image_bytes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;sess&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(xkcd_json[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;img&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;content
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;image_bytes


&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;print_xkcd_metadata&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;xkcd_json&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;):
    num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;xkcd_json[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;num&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;]
    month &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;xkcd_json[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;month&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;]
    year &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;xkcd_json[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;year&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;]
    title &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;xkcd_json[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;title&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;]
    transcript &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;xkcd_json[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;transcript&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;]

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;XKCD comic #&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{num}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt; was released on &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{year}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{month}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;\n\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;
          &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{title}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{transcript}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)


&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;display_xkcd_comic&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;image_bytes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;):
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# The image is already encoded so I have to wrap it
    # in a BytesIO object.
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Image&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(io&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;BytesIO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(image_bytes)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;im:
        im&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;show&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;()


&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;__name__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;__main__&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;:
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Little Bobby Tables
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;image_bytes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;pull_xkcd_comic&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;327&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;display_xkcd_comic&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(image_bytes)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;pull_xkcd_comic()&lt;&#x2F;code&gt; accepts an integer that refers to an xkcd comic. 327 is one of my favorite comics on SQL injections. Anywho, within that function I download metadata on the comic as JSON which is then stored into a dictionary (&lt;code&gt;xkcd_json&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;That dictionary is passed to another function, &lt;code&gt;print_xkcd_metadata()&lt;&#x2F;code&gt;, which prints the metadata. Control is returned to &lt;code&gt;pull_xkcd_comic()&lt;&#x2F;code&gt; after &lt;code&gt;print_xkcd_metadata()&lt;&#x2F;code&gt;. The actual image for the comic is downloaded using a link from the dictionary from earlier.&lt;&#x2F;p&gt;
&lt;p&gt;Next, the image data as a PNG which is stored as an bytes buffer is passed to &lt;code&gt;display_xkcd_comic()&lt;&#x2F;code&gt;. The bytes array is then passed to the constructor (another function) of a class, &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;io.html#io.BytesIO&quot;&gt;BytesIO&lt;&#x2F;a&gt; which wraps the buffer into a stream.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, the stream is parsed by Pillow.&lt;&#x2F;p&gt;
&lt;p&gt;Our data are passed around across multiple functions. Incredibly, the process outlined above elides all of the functions internally called by the libraries.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;references-and-values&quot;&gt;References and values&lt;&#x2F;h1&gt;
&lt;p&gt;Python’s evaluation strategy is to call by object reference. I’ll first discuss calling by value and by reference before discussing how Python handles parameters. Like other programming blogs, I’ll take a polyglot approach to demonstrate both conventions due to Python’s differences.&lt;&#x2F;p&gt;
&lt;p&gt;The language I’ll use for demonstration, &lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;&quot;&gt;Rust&lt;&#x2F;a&gt;, should look somewhat like Python for these simple examples but you may skip them if they’re difficult to understand. I’d rather write code in a real language than construct my own pseudo-code or write invalid Python. Both would be more confusing than helpful, in my opinion.&lt;&#x2F;p&gt;
&lt;p&gt;Parameters that are passed by value are copied or moved into the function. Data that are copied exists at the original location in memory as well as within the function (barring optimizations and whatnot). Modifying the data in one location doesn’t change the data in the other because the values are duplicated.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;modify_i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;number&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;    number &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; number &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;modify_i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(number);
    assert_eq!(number, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The value of &lt;code&gt;number&lt;&#x2F;code&gt; (a 32 bit signed integer) is copied into &lt;code&gt;modify_i32()&lt;&#x2F;code&gt;. The original hasn’t changed at all! Also notice that &lt;code&gt;number&lt;&#x2F;code&gt; is still valid after calling &lt;code&gt;modify_i32()&lt;&#x2F;code&gt; because the value wasn’t moved into the function.&lt;&#x2F;p&gt;
&lt;p&gt;Arguments that are moved are only valid within the function (that is, the function “owns” the value of the data). In other words, the data are moved into the function as well as likely to a new location in RAM, such as a new stack.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Person &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
    name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: String,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; Because everyone wants lots of cats.
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;number_of_cats&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;u128&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;print_human&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;person&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: Person) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;println!(
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Random human &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt; has &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt; cat companions!&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
        person&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;name, person&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;number_of_cats
    );
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; josh &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; Person &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;        name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Josh&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(),
        number_of_cats: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;14725251969&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; The value of &amp;quot;josh&amp;quot; is moved into print_human because Person cannot be copied.
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;print_human&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(josh);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; This doesn&amp;#39;t work:
    &#x2F;&#x2F; println!(&amp;quot;Hello {}!&amp;quot;, josh.name);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;Person&lt;&#x2F;code&gt; is a type that can’t be trivially copied. Trivially copyable types don’t own resources, such as pointers to memory or file handles.&lt;&#x2F;p&gt;
&lt;p&gt;We can take references to a &lt;code&gt;Person&lt;&#x2F;code&gt; or move the value to a new memory location. The function &lt;code&gt;print_human()&lt;&#x2F;code&gt; accepts a &lt;code&gt;Person&lt;&#x2F;code&gt; by value which in this case is a move.&lt;&#x2F;p&gt;
&lt;p&gt;Parameters that are passed by reference exist at the original location in memory but the function or struct borrows access to the value.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;print_human_ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;person&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Person) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;println!(
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Random human &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt; has &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt; cat companions!&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
        person&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;name, person&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;number_of_cats
    );
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; josh &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; Person &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;        name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Josh&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(),
        number_of_cats: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;14725251969&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; The value of &amp;quot;josh&amp;quot; is borrowed by print_human_ref instead this time.
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;print_human_ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;josh);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&#x2F;&#x2F; This WORKS now:
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Hello &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;!&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, josh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;name);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Okay, this should be the last of the Rust code. &lt;em&gt;Maybe.&lt;&#x2F;em&gt; No promises.&lt;&#x2F;p&gt;
&lt;p&gt;The ampersand indicates that &lt;code&gt;print_human_ref()&lt;&#x2F;code&gt; takes a reference to a value rather than moving the data. The &lt;code&gt;person&lt;&#x2F;code&gt; argument in the function refers to the memory location containing the value of a Person struct.&lt;&#x2F;p&gt;
&lt;p&gt;The function borrows access to the data which means that the value is still valid once &lt;code&gt;print_human_ref()&lt;&#x2F;code&gt; ends. The value exists at the original location in memory as well.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;call-by-object-reference-and-python&quot;&gt;Call by object reference and Python&lt;&#x2F;h2&gt;
&lt;p&gt;Python’s evaluation strategy passes objects by the value of the reference. Thus, as you can tell from the Python example in the first section, the objects are still valid across function calls rather than being moved or copied.&lt;&#x2F;p&gt;
&lt;p&gt;With that said, “call by object reference” is different than &lt;em&gt;call by reference&lt;&#x2F;em&gt;. Essentially, Python copies the value of the reference to an object into a function. The value of a reference is a number that represents a location in memory. You can check this out yourself using &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;functions.html#id&quot;&gt;id()&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;So, let’s untangle that a bit. My Rust examples were more complicated than Python because Rust has different goals (systems programming). Programmers specify exactly how arguments are passed in as well as are able to create types that are trivially copyable.&lt;&#x2F;p&gt;
&lt;p&gt;As a result, Rust programmers often consider the lifetimes of their variables as well as the appropriate scheme for their parameters. For example, moving resources can constrain lifetimes and reduce indirection.&lt;&#x2F;p&gt;
&lt;p&gt;Python elides all of that complexity (again, different goals) by copying the reference for values of objects, always. This means that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Everything in Python is an object, including primitive types such as integers&lt;&#x2F;li&gt;
&lt;li&gt;Python’s evaluation strategy is harder to explain than I thought&lt;&#x2F;li&gt;
&lt;li&gt;Python’s evaluation strategy is easier to understand in practice than explain&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;immutable-types&quot;&gt;Immutable types&lt;&#x2F;h1&gt;
&lt;p&gt;At this point, my dear readers may wonder why I focussed on another programming language and explained concepts that are ostensibly useless for Python. Trivially copyable values, such as integers and floats, save memory and can be optimized easily especially if they’re immutable.&lt;&#x2F;p&gt;
&lt;p&gt;An integer “object” seems counterintuitive. A class would introduce indirection for instances stored on the heap as well as a penalty for dynamic dispatch.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Returns True?!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;isinstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, Python handles this gracefully by treating primitive types as well as strings as immutable. The Python interpreter, such as CPython, can cache instances of these immutable types or optimize them in other ways.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Example of caching
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;14
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;14
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;assert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(a) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(b))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let’s first take a look at immutable primitives.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;modify_number&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;):
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Doesn&amp;#39;t modify the ORIGINAL i
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;42

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;append_meow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;):
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Doesn&amp;#39;t modify the ORIGINAL s
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;meow&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;42
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;modify_number&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(i)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# AHHH.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;assert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;84&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)

s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Cat!!! &amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;append_meow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(s)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# OH NO.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;assert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Cat!!! meow&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Neither of the two functions above modify the &lt;em&gt;original&lt;&#x2F;em&gt; values. &lt;code&gt;modify_number()&lt;&#x2F;code&gt; accepts a number and adds 42 to that number. The value of &lt;code&gt;i&lt;&#x2F;code&gt;’s reference is copied to the function as usual. However, numbers are immutable so the interpreter &lt;strong&gt;does not&lt;&#x2F;strong&gt; modify the value referenced by &lt;code&gt;i&lt;&#x2F;code&gt;. &lt;code&gt;append_meow()&lt;&#x2F;code&gt; is a similar case.&lt;&#x2F;p&gt;
&lt;p&gt;Python strings are immutable. The line:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;meow&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;…returns a new string with “meow” appended whose reference is then assigned to &lt;code&gt;s&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Likewise, &lt;code&gt;modify_number()&lt;&#x2F;code&gt; returns a new &lt;code&gt;int&lt;&#x2F;code&gt; instance.&lt;&#x2F;p&gt;
&lt;p&gt;Is this confusing? Of course it is! Let’s take a look at how this works step by step (more or less).&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;maybe_mutate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;):
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Address of i pre-mutation [in function]: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(i)}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)
    i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;42
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Address of i post-mutation [in function: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(i)}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;i

i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;14
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Address of i pre-mutation [outside function]: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(i)}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)
j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;maybe_mutate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(i)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Address of i post-mutation [outside function: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(i)}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Address of j (return val) post-mutation [outside function: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(j)}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Address of i pre-mutation [outside function]: 94853837223264
Address of i pre-mutation [in function]: 94853837223264
Address of i post-mutation [in function: 94853837224608
Address of i post-mutation [outside function: 94853837223264
Address of j (return val) post-mutation [outside function: 94853837224608
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Pay attention to the numbers in each line as well as the code. You’ll notice that &lt;code&gt;i&lt;&#x2F;code&gt; &lt;strong&gt;is the same&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;pre-mutation outside of the function&lt;&#x2F;li&gt;
&lt;li&gt;pre-mutation inside of the function&lt;&#x2F;li&gt;
&lt;li&gt;post-mutation &lt;strong&gt;outside&lt;&#x2F;strong&gt; of the the function&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;code&gt;i&lt;&#x2F;code&gt; refers to the same object outside of the function before the call as when it is passed into the function &lt;strong&gt;before&lt;&#x2F;strong&gt; mutation. &lt;code&gt;i&lt;&#x2F;code&gt; refers to the same object &lt;strong&gt;after&lt;&#x2F;strong&gt; the function call returns and &lt;strong&gt;after mutation.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;i&lt;&#x2F;code&gt; changes within the function to a new object when I attempted to mutate &lt;code&gt;i&lt;&#x2F;code&gt;. &lt;code&gt;j&lt;&#x2F;code&gt;, the value that is returned, is that same object. In other words, a new object was created when I added 42 to &lt;code&gt;i&lt;&#x2F;code&gt; and the reference to that object was copied into &lt;code&gt;i&lt;&#x2F;code&gt;. The original &lt;code&gt;i&lt;&#x2F;code&gt; still exists as you can see when the function returns.&lt;&#x2F;p&gt;
&lt;p&gt;As a side note, Python throws an error if you try to modify an immutable variable.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# OH NO. A typo! 😱
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Josg&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Eh, I&amp;#39;ll just fix it the cool way with indexing! 😺
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;name[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;h&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;TypeError: &amp;#39;str&amp;#39; object does not support item assignment
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h1 id=&quot;mutable-types&quot;&gt;Mutable types&lt;&#x2F;h1&gt;
&lt;p&gt;Mutable types are modifiable in some way such as collections or instances of classes that hold some kind of state.&lt;&#x2F;p&gt;
&lt;p&gt;Like references to immutable values, mutable types are passed by copying the reference into the function. Modifying mutable types changes aspects of the value rather than producing a new value.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;print_favorites&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;favorite_pokemon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;):
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Memory location in function: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(favorite_pokemon)))
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;person, pokemon &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;favorite_pokemon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;():
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{person}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;s favorite Pokémon is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{pokemon}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;.&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)

favorite_pokemon &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Josh&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Espeon&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Memory location pre-mutation: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(favorite_pokemon)))
favorite_pokemon[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Jaqueline&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Drampa&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Memory location post-mutation: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(favorite_pokemon)))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;print_favorites&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(favorite_pokemon)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Memory location pre-mutation: 139810692989408
Memory location post-mutation: 139810692989408
Memory location in function: 139810692989408
Josh&amp;#39;s favorite Pokémon is Espeon.
Jaqueline&amp;#39;s favorite Pokémon is Drampa.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;favorite_pokemon&lt;&#x2F;code&gt; is a dictionary which is a mutable type. Adding Jaqueline’s favorite Pokémon to the dictionary mutates the dictionary without returning a new object. The memory location of &lt;code&gt;favorite_pokemon&lt;&#x2F;code&gt; remains the same throughout the script.&lt;&#x2F;p&gt;
&lt;p&gt;Logically, the reference would change if we replaced &lt;code&gt;favorite_pokemon&lt;&#x2F;code&gt; with a new object.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Tiffany gets her own dictionary. 🙀
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;favorite_pokemon &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Tiffany&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Psyduck and Snorlax&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;what-if-i-want-to-change-a-number-immutable-value-in-a-function&quot;&gt;What if I want to change a number&#x2F;immutable value in a function?&lt;&#x2F;h2&gt;
&lt;p&gt;The simple answer is that you don’t. If you’re passing in a number, &lt;code&gt;i&lt;&#x2F;code&gt;, you should return a new number than try to modify that single &lt;code&gt;i&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Essentially, for all immutable types you should return a new instance of that type. I’m going to speak a bit broadly by saying that this pattern holds across other programming languages as well.&lt;&#x2F;p&gt;
&lt;p&gt;In Rust (okay I lied earlier), we could mutate an integer in a function if we really wanted to like so:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;add_answer_to_i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;add_answer_to_i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; i);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is a bit silly. On a 64 bit system, &lt;code&gt;add_answer_to_i()&lt;&#x2F;code&gt; takes a 64 bit pointer to a 32 bit number. The pointer required to modify &lt;code&gt;i&lt;&#x2F;code&gt; is &lt;em&gt;larger&lt;&#x2F;em&gt; than &lt;code&gt;i&lt;&#x2F;code&gt; itself (barring optimizations)!&lt;&#x2F;p&gt;
&lt;p&gt;Idiomatic Rust like idiomatic C as well as idiomatic Python calls for simply returning a trivial, copyable value.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;add_answer_to_i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;    i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;42
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And Python:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;add_answer_to_i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;):
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;42
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;An easy but ugly workaround is to wrap an immutable type in a mutable type, &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;15148496&quot;&gt;such as a list&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;mut_add_bad&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;mut_i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;j&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;):
    mut_i[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;j
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Don’t do that.&lt;&#x2F;p&gt;
&lt;p&gt;I actually wrote a wrapper around a number before stumbling upon the question above. Don’t do that either.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;color:#8be9fd;&quot;&gt;OwnedNumber&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;:
    __slots__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;_number&amp;quot;

    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;number&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;):
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;_number &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;number

    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;__int__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;other&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;):
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Type cast to ease adding two OwnedNumbers as well as adding other
        # types to OwnedNumber
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;isinstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(other, OwnedNumber):
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;other&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;_number
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;:
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(other)

    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;__repr__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;):
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;OwnedNumber(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;)&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;_number&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;__repr__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;())

    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;__str__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;):
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;_number)

    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;__add__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;other&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;):
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Return new instance on add
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;OwnedNumber&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;_number &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(other))

    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;__iadd__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;other&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;):
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;_number &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(other)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;self

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Et cetera...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;OwnedNumber&lt;&#x2F;code&gt; is a mutable type that wraps around a number (or, really, anything that implements &lt;code&gt;add()&lt;&#x2F;code&gt; and &lt;code&gt;iadd()&lt;&#x2F;code&gt;). Try testing out &lt;code&gt;OwnedNumber&lt;&#x2F;code&gt; by adding integers or other &lt;code&gt;OwnedNumber&lt;&#x2F;code&gt;s to an instance.&lt;&#x2F;p&gt;
&lt;p&gt;Obviously, the “strategies” above are not great solutions at all. Python’s immutable types are immutable for good reasons.&lt;&#x2F;p&gt;
&lt;p&gt;Mutating an immutable variable is wildly unsafe and will likely cause &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Undefined_behavior&quot;&gt;undefined behavior&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I attempted to modify a &lt;code&gt;long&lt;&#x2F;code&gt; in Python using the low level APIs, but I ended up with a migraine because of the work involved. Take a look at &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;python&#x2F;cpython&#x2F;blob&#x2F;main&#x2F;Objects&#x2F;longobject.c&quot;&gt;longobject.c&lt;&#x2F;a&gt;. CPython is a complex beast even when considering something as benign as an integer.&lt;&#x2F;p&gt;
&lt;p&gt;Fun fact: Did you know CPython caches all small integers immediately? Numbers from &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;c-api&#x2F;long.html#c.PyLong_FromLong&quot;&gt;-5 to 256&lt;&#x2F;a&gt; are magically cached. &lt;em&gt;I’ve spent the greater part of the last day fiddling with Rust + CPython.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-if-i-don-t-want-a-function-to-sully-my-mutable-objects&quot;&gt;What if I don’t want a function to sully my mutable objects?&lt;&#x2F;h2&gt;
&lt;p&gt;Languages with greater control over parameters allow programmers to pass types immutably. In this case, a function’s declaration would list which parameters are mutable or immutable.&lt;&#x2F;p&gt;
&lt;p&gt;As we saw with Python, immutability is largely defined on the type level rather than determined when objects are created or passed as arguments. Python functions are free to mutate (or not) arguments without scrutiny.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s say we had a function to add my favorite Pokémon to a dictionary:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Yet another contrived function
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;add_pokemanz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;dict_to_sully&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;):
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;if not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(dict_to_sully&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;()):
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;ValueError&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Hey! You passed an empty dict. Rude.&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;person, pokemon &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;zip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Josh&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Jaqueline&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Tiffany&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;],
                               [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Espeon&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Drampa&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Psyduck and Snorlax&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;]):
        dict_to_sully[person] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;pokemon
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You see, I &lt;strong&gt;really&lt;&#x2F;strong&gt; want to add my (and Jaqueline and Tiffany’s) favorite Pokémon to your precious dictionary. Okay, my function is contrived because I had trouble figuring out a simple, pithy example. Bare with me here!&lt;&#x2F;p&gt;
&lt;p&gt;You may work with an API that modifies a mutable variable. For example, a function may take an image and destructively transform the buffer. You may have a set of cleaning functions that alter a &lt;a href=&quot;https:&#x2F;&#x2F;pandas.pydata.org&#x2F;docs&#x2F;reference&#x2F;api&#x2F;pandas.DataFrame.html&quot;&gt;pandas.DataFrame&lt;&#x2F;a&gt;. You may encounter a jerk who intends to sully your &lt;code&gt;favorite_pokemon&lt;&#x2F;code&gt; dictionary.&lt;&#x2F;p&gt;
&lt;p&gt;Cloning solves this problem with some caveats.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;my_favorites &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Pokemon here
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# This is now a new object via a shallow copy.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;my_favorites_cpy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;my_favorites&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;copy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;()

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# The original dictionary is left untouched.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;add_pokemanz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(my_favorites_cpy)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h1 id=&quot;shallow-and-deep-copies&quot;&gt;Shallow and deep copies&lt;&#x2F;h1&gt;
&lt;p&gt;Copying or cloning the mutable &lt;code&gt;my_favorites&lt;&#x2F;code&gt; dictionary produces a new dictionary with the same references. Remember, Python stores references to values in variables. The keys and values of a dictionary are objects just like everything else in Python. Copying a collection containing immutable types doesn’t matter because the new collection with the old references can’t modify the immutable values anyway.&lt;&#x2F;p&gt;
&lt;p&gt;For example, a dictionary, &lt;code&gt;dict[str, str]&lt;&#x2F;code&gt;, may be copied without repercussion because the values can’t be modified.&lt;&#x2F;p&gt;
&lt;p&gt;Dictionary keys must be hashable which usually implies immutability.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;an-aside-on-hashes&quot;&gt;An aside on hashes&lt;&#x2F;h2&gt;
&lt;p&gt;A &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Hash_function&quot;&gt;hash function&lt;&#x2F;a&gt; generates a number that is unique for a value across calls.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Josh&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;o &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Josh&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Josh&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;h &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Josh&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;assert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(j) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(o) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(s) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(h) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Josh&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Hashes are used across programming. You’re likely most familiar with hashes in terms of Python’s dictionaries. Keys are hashed, as mentioned above, so that you can map values to keys. Retrieving a value with a key works because the key is hashed to a unique number (well, barring collisions). Therefore, we don’t expect keys and their respective hashes to change or else the entire concept of a dictionary (a.k.a. a hash map) is broken.&lt;&#x2F;p&gt;
&lt;p&gt;Try calling &lt;code&gt;hash()&lt;&#x2F;code&gt; on Python objects to play around with hashes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;back-to-copying&quot;&gt;Back to copying&lt;&#x2F;h2&gt;
&lt;p&gt;Besides keys, each dictionary value is copied into the new dictionary as well on calls to &lt;code&gt;clone()&lt;&#x2F;code&gt;. If the type of the value is immutable then the new dictionary is functionally equivalent to the old dictionary. But what if the value is a mutable type, such as a list?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;collections &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;defaultdict
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;collections&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;abc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Iterable

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;update_fav_pokemon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;fav_pokemon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;pokemon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;):
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Mimic defaultdict if fav_pokemon is a dict but not a defaultdict
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;isinstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(fav_pokemon, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;dict&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;and not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;isinstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(fav_pokemon,
                                                        defaultdict):
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Add an empty list with name as the key if name doesn&amp;#39;t exist in
        # fav_pokemon. I.e., mimic defaultdict.
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;if not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;fav_pokemon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(name):
            fav_pokemon[name] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;[]
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;elif not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;isinstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(fav_pokemon, defaultdict):
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;ValueError&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;&amp;#39;fav_pokemon&amp;#39; should be a dictionary.&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Check if pokemon is a str first because strings are Iterable
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;isinstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(pokemon, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;):
        fav_pokemon[name]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(pokemon)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;isinstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(pokemon, Iterable):
        fav_pokemon[name]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;extend&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(pokemon)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;:
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;ValueError&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;&amp;#39;pokemon&amp;#39; should be a list of str or a str.&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)

fav_pokemon &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;defaultdict&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;update_fav_pokemon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(fav_pokemon, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Jaqueline&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Drampa&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Psyduck&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;])
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;update_fav_pokemon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(fav_pokemon, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Joshua&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Espeon&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Dragonite&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;])
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;update_fav_pokemon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(fav_pokemon_clone, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Tiffany&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Snorlax&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;])

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Trivial, shallow copy
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;fav_pokemon_clone &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;fav_pokemon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;copy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Add Psyduck to Tiffany&amp;#39;s list of favorites in the new dictionary only.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;update_fav_pokemon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(fav_pokemon_clone, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Tiffany&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Psyduck&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# The two are equal!
# Tiffany&amp;#39;s list was modified IN BOTH DICTIONARIES.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;assert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(fav_pokemon &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;fav_pokemon_clone)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Cloning &lt;code&gt;fav_pokemon&lt;&#x2F;code&gt; is naïve. The keys’ references are copied as expected, but the &lt;strong&gt;lists (values) are also copied by reference!&lt;&#x2F;strong&gt; In other words, the new dictionary contains the same references to the values (mutable lists) as the old dictionary. Changes to any of the lists cascades so that each variable or object storing a reference to that list observes the new changes.&lt;&#x2F;p&gt;
&lt;p&gt;Now, in order to be perfectly clear, I’m only referring to the &lt;strong&gt;values&lt;&#x2F;strong&gt; of the dictionary here. The references to the (immutable) keys and the (immutable or mutable) values are coped into a new dictionary. Thus, modifying the new dictionary itself to add or remove keys doesn’t cascade to the old dictionary.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;copy()&lt;&#x2F;code&gt; performs what is known as a &lt;strong&gt;shallow or trivial copy&lt;&#x2F;strong&gt; on an object. &lt;code&gt;copy()&lt;&#x2F;code&gt; dutifully copies references from an old object into a new object. Using &lt;code&gt;copy()&lt;&#x2F;code&gt; improperly will invariably lead to hard to track down bugs if mutable types are copied.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;copy()&lt;&#x2F;code&gt; essentially works like so:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;copy_dict_shallow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;old&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;):
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{key: value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;key, value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;old&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;()}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A dictionary of immutable values would copy without engendering race conditions because we are positive that the values won’t change unexpectedly.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;deep-copies&quot;&gt;Deep copies&lt;&#x2F;h2&gt;
&lt;p&gt;The correct solution in this case is to make &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;copy.html&quot;&gt;deep copies&lt;&#x2F;a&gt; instead of shallow. I’m sure that’s not a surprise given the header of this section!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;copy

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# And that&amp;#39;s it!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;fav_pokemon_clone &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;copy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;deepcopy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(fav_pokemon)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Deep copies clone each object rather than simply copying references. For example, if an object contains lists, dictionaries, and other mutable types, &lt;code&gt;deepcopy&lt;&#x2F;code&gt; will clone each object and assign the &lt;em&gt;new&lt;&#x2F;em&gt; references to the variables in the new object. &lt;code&gt;deepcopy&lt;&#x2F;code&gt; works regardless of the structure of an object. Thus, nested objects (that is, an object that contains other objects that contains other objects) clone appropriately given that the types are cloneable (sockets are not cloneable, for example). Instances of classes are similarly copyable.&lt;&#x2F;p&gt;
&lt;p&gt;CPython’s implementation of deep copy even handles recursive objects (objects that hold references to themselves).&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;recursive_list &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Mickey&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Donald&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Goofy&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Sora&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;]
recursive_list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(recursive_list)
recursive_list_copy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;copy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;deepcopy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(recursive_list)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;recursive_list&lt;&#x2F;code&gt; copies correctly without infinitely cloning the self referential element. Dutifully cloning each element of a data structure would fail if nested structures contain references to themselves or other structures that have already been cloned. For example, if we imprudently cloned each element of the list above in a loop, we’d end up repeatedly cloning &lt;code&gt;recursive_list&lt;&#x2F;code&gt; because it contains itself.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;default-arguments-and-mutability&quot;&gt;Default arguments and mutability&lt;&#x2F;h1&gt;
&lt;p&gt;Mutability and default arguments in Python are a potential footgun. Newbie programmers might expect that the interpreter creates a new object per default argument.&lt;&#x2F;p&gt;
&lt;p&gt;…nope.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;nope&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;a_list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;[]):
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(a_list)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Call nope() two million times and check if the default argument&amp;#39;s id is the same
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;1_000_000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;):
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;assert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;nope&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;nope&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This may initially seem insensible, but Python is manifestly sensible here. Creating a new instance of a default argument on each function call would be wasteful and expensive. As noted earlier, Python caches numbers and strings even beyond what we’d assume from reference counting. Caching default arguments is similarly logical.&lt;&#x2F;p&gt;
&lt;p&gt;Default arguments, as mentioned in the first part of this guide, eases calling functions with long signatures. Thus, default arguments encapsulate a reasonable value for an optional parameter. Optional parameters are likely to be strings or numbers that modify how the function executes.&lt;&#x2F;p&gt;
&lt;p&gt;(NumPy example)
(Socket example)&lt;&#x2F;p&gt;
&lt;p&gt;An object that is “empty” or default constructed in some way (for example, an empty &lt;code&gt;list&lt;&#x2F;code&gt; or &lt;code&gt;pandas.DataFrame&lt;&#x2F;code&gt;) usually doesn’t make sense as a default argument.&lt;&#x2F;p&gt;
&lt;p&gt;At the moment I’m sure you’re listing twenty different examples where an empty collection is perfectly acceptable as a default argument. You’re likely correct. But what does an empty &lt;code&gt;list&lt;&#x2F;code&gt; in a function declaration mean? An empty &lt;code&gt;list&lt;&#x2F;code&gt; signifies absence or &lt;code&gt;None&lt;&#x2F;code&gt;. &lt;code&gt;None&lt;&#x2F;code&gt; is more philosophically consistent with what a programmer wishes to present with a default argument of an empty &lt;code&gt;list&lt;&#x2F;code&gt; than an empty &lt;code&gt;list&lt;&#x2F;code&gt; (or whatever) itself.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Functions in Python I: Simple functions and argument handling</title>
		<published>2021-07-02T00:00:00+00:00</published>
		<updated>2021-07-13T00:00:00+00:00</updated>
		<link href="https://joshuamegnauth54.github.io/data_python/functions/" type="text/html"/>
		<id>https://joshuamegnauth54.github.io/data_python/functions/</id>
		<content type="html">&lt;h1 id=&quot;what-are-functions&quot;&gt;What are functions?&lt;&#x2F;h1&gt;
&lt;p&gt;Whenever I learn a new programming language my first steps are as follows:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Print “I like cats” to &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Standard_streams&quot;&gt;stdout&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Write a function.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I’ve found that newbie programmers tend to be scared of writing functions despite calling functions constantly. Data analysts are especially wary of writing functions which, I wager, isn’t helped by the languages we usually use: &lt;a href=&quot;https:&#x2F;&#x2F;www.python.org&#x2F;&quot;&gt;Python&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;www.r-project.org&#x2F;&quot;&gt;R&lt;&#x2F;a&gt;. Data analysts are often taught to write code as a means to an end which often precludes writing our own functions. Thus, many data scripts are unwieldly, throwaway megaliths of code held together by tape and old glue. Good scripting languages like Python are ergonomic enough that newbie programmers could do a lot even if they forgo functions. However, functions are one of those tools that you can’t go without.&lt;&#x2F;p&gt;
&lt;p&gt;Like loops, another bugbear, functions are initially difficult to write but become second nature after some practice. They’re so useful that I’d feel naked without the ability to write functions. But what are functions anyway?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Functions are reusable blocks of code that may accept zero or more parameters and return &lt;code&gt;None&lt;&#x2F;code&gt; or one or more values or objects.&lt;&#x2F;strong&gt; Admittedly, defining functions didn’t seem to make them less scary. Let’s go deeper by looking at a basic, built in Python function to understand function design as well as gain an intuition as to why you’d want to write your own. Many of you may find the section below tedious. Feel free to skip it. I won’t be mad…maybe.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;handy-terminology&quot;&gt;Handy terminology&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Using a function is often referred to as &lt;strong&gt;calling or invoking a function&#x2F;&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Function inputs are also known as &lt;strong&gt;parameters&lt;&#x2F;strong&gt; or &lt;strong&gt;arguments.&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Outputs are also called &lt;strong&gt;return values.&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Declarations&lt;&#x2F;strong&gt; or &lt;strong&gt;signatures&lt;&#x2F;strong&gt; are the headers that outline a function. A function’s name and parameters are part of the declaration.&lt;&#x2F;li&gt;
&lt;li&gt;A function’s &lt;strong&gt;definition&lt;&#x2F;strong&gt; is the body of code that is executed when invoked.&lt;&#x2F;li&gt;
&lt;li&gt;Functions associated with a class, such as &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;stdtypes.html#str.format&quot;&gt;str.format&lt;&#x2F;a&gt;, are called &lt;strong&gt;methods&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Instance methods&lt;&#x2F;strong&gt; are called on a constructed object (an instance). &lt;strong&gt;Class methods&lt;&#x2F;strong&gt; don’t require an instance but are associated with the type in some way.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Parameters and arguments are &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;1788923&#x2F;parameter-vs-argument&quot;&gt;technically different terms&lt;&#x2F;a&gt;, but they’re &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch03-03-how-functions-work.html&quot;&gt;used interchangeably&lt;&#x2F;a&gt;. Parameters are the variables that receive an argument. Arguments are the values passed into parameters.&lt;&#x2F;p&gt;
&lt;p&gt;Imagine we had a function, &lt;code&gt;mean()&lt;&#x2F;code&gt;, that takes in a list of floats and outputs a single float. We can say that &lt;code&gt;mean()&lt;&#x2F;code&gt; has one parameter, a list of floats, and returns a float. We can call &lt;code&gt;mean()&lt;&#x2F;code&gt; with &lt;code&gt;[14, 28, 42]&lt;&#x2F;code&gt;, an argument.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reusability&quot;&gt;Reusability&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s say we want to write “I like cats” to &lt;em&gt;stdout&lt;&#x2F;em&gt;. To do so we’d obviously use Python’s built in &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;functions.html#print&quot;&gt;print()&lt;&#x2F;a&gt; function. Python’s documentation states that &lt;code&gt;print()&lt;&#x2F;code&gt; writes strings (or objects that can be represented as a string) to a stream where the stream is &lt;em&gt;stdout&lt;&#x2F;em&gt; by default. So, all we really need to do is call &lt;code&gt;print()&lt;&#x2F;code&gt; with “I like cats.”&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# 👇 Function call
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;I like cats.&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;I like cats.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We know that we can use &lt;code&gt;print()&lt;&#x2F;code&gt; with different strings and objects. In other words, we’re clearly not limited to printing “I like cats” and can also print “I like giraffes” as well. The function is general enough that we can and do use it constantly. Imagine how limited Python would be if &lt;code&gt;print()&lt;&#x2F;code&gt; were actually &lt;code&gt;print_i_like_cats()&lt;&#x2F;code&gt; instead. Everyone likes cats, but programmers likely have more to print than just that fact of life. Furthermore, programmers would have to write hundreds of functions for every little statement they’d wish to print and thus duplicate code and effort.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;encapsulation&quot;&gt;Encapsulation&lt;&#x2F;h2&gt;
&lt;p&gt;We’ve all used &lt;code&gt;print()&lt;&#x2F;code&gt; before but likely without considering the amount of work that goes into simply printing characters to a console. This is essentially the reusability of functions in a nutshell. Writing characters to a stream involves ensuring the input is valid as well as copying the input to the stream. The stream may be a file, special file (&lt;em&gt;stdout&lt;&#x2F;em&gt;), socket, et cetera. A buffer may be managed somewhere along the line. As a programmer, you (most likely) don’t want to go through the hassle of manually printing characters.&lt;&#x2F;p&gt;
&lt;p&gt;The beauty of functions is clearly represented by &lt;code&gt;print()&lt;&#x2F;code&gt; which wraps layers of actions that are invisible to the user that we don’t even have to understand. Do we need to understand how “I like cats” is eventually output to our terminal? For the most part, no. The &lt;code&gt;print()&lt;&#x2F;code&gt; function does &lt;strong&gt;one action well&lt;&#x2F;strong&gt; by virtue of its own lines of code as well as the other functions called along the chain.&lt;&#x2F;p&gt;
&lt;p&gt;Notice that we aren’t calling a behemoth that writes to a stream, reads from a stream, parses data, manages memory, and more in a single function. The function is simply designed to ease writing to a stream. Invariably, &lt;code&gt;print()&lt;&#x2F;code&gt; calls other functions to delegate tasks such as actually writing to the stream, but those details are hidden from our view as callers of the function. Instead, we only have to worry about how we consume the function. The function’s inner workings may change throughout Python versions but that doesn’t usually affect how we use &lt;code&gt;print()&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I’m belaboring my point here, but hopefully you can gain an intuition about functions in general from Python’s intricate but humble &lt;code&gt;print()&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;parameters&quot;&gt;Parameters&lt;&#x2F;h2&gt;
&lt;p&gt;Python’s &lt;code&gt;print()&lt;&#x2F;code&gt; function also accepts zero or more parameters as our definition above states. We can pass multiple printable objects into the function, specify a string to separate each object, and also write to a different stream according to the docs.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;sys
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;time

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Printing a sequence of strings to standard error
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;your cat is hungry&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(),
      &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;sep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;! &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
      &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
      &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;sys&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;stderr)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Your! Cat! Is! Hungry!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The code above prints a sequence of strings to standard error that are separated by the string &lt;code&gt;&amp;quot;! &amp;quot;&lt;&#x2F;code&gt;. &lt;code&gt;*&amp;quot;your cat is hungry&amp;quot;.title().split()&lt;&#x2F;code&gt; looks complicated but is actually one of those nice, space efficient Python expressions. You don’t have to understand it for this post but I’ll explain anyway. The line of code calls a string method to set the string to title case followed by splitting that return value by whitespace and returning a list. That list is finally unpacked into separate strings. Thus, the &lt;code&gt;print()&lt;&#x2F;code&gt; function is effectively called with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Your&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Cat&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Is&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Hungry&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
      &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;sep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;! &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
      &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
      &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;sys&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;stderr)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We’ll talk about this in a second after another related example.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Printing four different objects
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;awesome_animals &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;cat&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;giraffe&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;duck&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;bunny&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;])
favorite_pokemon &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Espeon&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;bands_genres &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Sonic Youth&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;noise rock&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;King Crimson&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;progressive rock&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Godspeed! You Black Emperor&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;post rock&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(awesome_animals, bands_genres, favorite_pokemon, time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;localtime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(),
      &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;sep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;\n\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{&amp;#39;bunny&amp;#39;, &amp;#39;cat&amp;#39;, &amp;#39;duck&amp;#39;, &amp;#39;giraffe&amp;#39;}

{&amp;#39;Sonic Youth&amp;#39;: &amp;#39;noise rock&amp;#39;, &amp;#39;King Crimson&amp;#39;: &amp;#39;progressive rock&amp;#39;, &amp;#39;Godspeed! You Black Emperor&amp;#39;: &amp;#39;post rock&amp;#39;}

Espeon

time.struct_time(tm_year=2021, tm_mon=6, tm_mday=24, tm_hour=4, tm_min=31, tm_sec=21, tm_wday=3, tm_yday=175, tm_isdst=1)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;print()&lt;&#x2F;code&gt; takes parameters that—surprise!—are all related to printing objects to a stream. &lt;code&gt;print()&lt;&#x2F;code&gt; conveniently abstracts away busy work which is evident from its parameters. &lt;code&gt;print()&lt;&#x2F;code&gt; is designed to ease writing different objects, so the parameters focus on allowing the programmer to pass as many different objects as they wish as well as control the output in some way such as by adding separators between the objects.&lt;&#x2F;p&gt;
&lt;p&gt;Notice that my first invocation in this section passes four strings as input (&lt;code&gt;&amp;quot;Your&amp;quot;&lt;&#x2F;code&gt;, &lt;code&gt;&amp;quot;Cat&amp;quot;&lt;&#x2F;code&gt;, &lt;code&gt;&amp;quot;Is&amp;quot;&lt;&#x2F;code&gt;, and &lt;code&gt;&amp;quot;Hungry&amp;quot;&lt;&#x2F;code&gt;). However, the second invocation passes four different objects: a set, a string, a dictionary, and a &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;time.html#time.struct_time&quot;&gt;struct_time&lt;&#x2F;a&gt;. In both cases the function prints out what we expect without any additional processing. Lower level functions may expect a string which means we would need to manually call another function to get a string representation of those objects. &lt;code&gt;print()&lt;&#x2F;code&gt; handles that for us. This is an important point which I’ve repeated enough that you’re likely bored of hearing it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;Okay! That was a longer digression than I intended. The point of annoyingly looking at &lt;code&gt;print()&lt;&#x2F;code&gt; in detail was to provide an intuition about functions so that you start to think about writing your own.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;print()&lt;&#x2F;code&gt;…&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Is convenient&lt;&#x2F;li&gt;
&lt;li&gt;Is easy to call (&lt;em&gt;id est&lt;&#x2F;em&gt; the parameters aren’t difficult to understand)&lt;&#x2F;li&gt;
&lt;li&gt;Abstracts away boilerplate (that is, it saves you from manually writing each object to a stream)&lt;&#x2F;li&gt;
&lt;li&gt;Generalizes an action so that it is reusable&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In fact, programmers usually generalize these idioms (more or less) into &lt;strong&gt;D.R.Y.: Don’t Repeat Yourself.&lt;&#x2F;strong&gt; Your own functions don’t have to be as integral, elegant, and even useful as &lt;code&gt;print()&lt;&#x2F;code&gt; to benefit from D.R.Y. You may find yourself writing lines of code that look similar to lines of code you’ve written previously in the same project; these are awesome candidates for functions.&lt;&#x2F;p&gt;
&lt;p&gt;As an exercise, try thinking about other functions you’ve encountered in Python, libraries, or other programming languages. How are they convenient? Imagine writing code without these functions to test the points above.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;writing-functions-a-basic-and-boring-example&quot;&gt;Writing functions - a basic and boring example&lt;&#x2F;h1&gt;
&lt;p&gt;Let’s jump into writing functions via a very boring, canonical example before moving onto something fun.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;say_hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;):
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Hi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{name}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;! 😺😺😺&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# And calling say_hello:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;say_hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Josh&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Hi Josh! 😺😺😺
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;First, let’s go over the syntax of writing a basic, one line function.&lt;&#x2F;p&gt;
&lt;p&gt;Python’s keyword &lt;code&gt;def&lt;&#x2F;code&gt; indicates a function definition (see? &lt;strong&gt;def&lt;&#x2F;strong&gt;inition!). The next element is my function’s name: &lt;code&gt;say_hi&lt;&#x2F;code&gt;. The list of parameters follows the name. &lt;code&gt;say_hi&lt;&#x2F;code&gt; only takes in one argument, &lt;code&gt;name&lt;&#x2F;code&gt;, which is the name we’re greeting with &lt;code&gt;print()&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The colon, &lt;code&gt;:&lt;&#x2F;code&gt;, separates the function declaration from the indented block of code of the function itself (the definition). Calling a function “jumps” to the code within the indented block from wherever the function was called. As you can see, the function’s code is simply more Python rather than any special syntax.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, the parameter, &lt;code&gt;name&lt;&#x2F;code&gt;, is a variable in scope for the function which means we can use &lt;code&gt;name&lt;&#x2F;code&gt; just like any other variable within the indented block. The print statement demonstrates this as &lt;code&gt;name&lt;&#x2F;code&gt; is used within &lt;code&gt;print()&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s work through writing a few more functions because I don’t really want to talk about &lt;code&gt;say_hi&lt;&#x2F;code&gt; anymore.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;mean-variance-and-standard-deviation&quot;&gt;Mean, variance, and standard deviation&lt;&#x2F;h1&gt;
&lt;p&gt;Mean, variance, and standard deviation are simple formulas that are perfect for demonstrating writing functions. The functions are &lt;strong&gt;composable&lt;&#x2F;strong&gt; because variance uses the mean and standard deviation is the square root of variance. While means are simple to calculate, writing out the formula in line each time an average is needed is tedious and possibly error prone. We may want to add extra features to the mean calculation as well which would be difficult if we copy and pasted the line(s) of code throughout our program. What if we needed to implement one of the 9001 formula that use the mean in some way? Would we copy and paste the mean code each time we need, say, root mean squared error? Don’t forget &lt;strong&gt;D.R.Y.&lt;&#x2F;strong&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;(With that said, you totally shouldn’t roll your own mean function in normal practice in lieu of using the &lt;code&gt;mean()&lt;&#x2F;code&gt; available from libraries like &lt;a href=&quot;https:&#x2F;&#x2F;numpy.org&#x2F;&quot;&gt;NumPy&lt;&#x2F;a&gt;. These are just examples, okay?)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mean&quot;&gt;Mean&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;collections&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;abc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Iterable

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;mean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;):
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# First check if array is an Iterable since we need a sequence of numbers.
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;if not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;isinstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(array, Iterable):
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;TypeError&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Array should be a sequence of numbers.&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)

      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Fail on empty Iterables
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(array) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;:
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;ValueError&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;You can&amp;#39;t call mean() with an empty array, bud.&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)

      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# And finally check if every value in array is either an int or a float.
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;if not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;lambda &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;isinstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(x, (&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)), array)):
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;TypeError&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;You have to pass in an array of numbers.&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)

      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# After all of that we can finally return the mean of array.
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(array)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(array)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;mean()&lt;&#x2F;code&gt; ramps up the difficulty a bit! Python is dynamically typed, so I wrote a few (arguably superfluous) checks to constrain &lt;code&gt;array&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;isinstance()&lt;&#x2F;code&gt; is a function that returns &lt;code&gt;True&lt;&#x2F;code&gt; if the first argument (an object) is one of the types in the second argument. Thus, &lt;code&gt;isinstance(array, Iterable)&lt;&#x2F;code&gt; is testing if the argument, &lt;code&gt;array&lt;&#x2F;code&gt;, is an &lt;code&gt;Iterable&lt;&#x2F;code&gt;. The next test checks if the array has at least one element. You can’t take the mean of an empty object since &lt;code&gt;sum([])&lt;&#x2F;code&gt; is 0 and &lt;code&gt;len([])&lt;&#x2F;code&gt; is 0.&lt;&#x2F;p&gt;
&lt;p&gt;The last check is more complex due to the lambda, so I’ll cover it when I discuss anonymous functions. Essentially, I’m testing if each element is a number.&lt;&#x2F;p&gt;
&lt;p&gt;Python would throw an exception even if we didn’t have these checks. For example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;one_liner_mean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;):
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(a)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(a)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;one_liner_mean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;28&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;I broke&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;your function&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;25 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;** &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;YOU NERD.&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;56&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To which Python complains:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;TypeError: unsupported operand type(s) for +: &amp;#39;int&amp;#39; and &amp;#39;str&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, ensuring your functions return proper error messages when appropriate is important for debugging and general use. &lt;code&gt;say_hi&lt;&#x2F;code&gt; from earlier doesn’t perform any error checking at all. Callers can provide nonsensical arguments that execute while being incorrect. While this doesn’t matter for a function as trivial and useless and &lt;code&gt;say_hi&lt;&#x2F;code&gt;, a simple check can be lifesaving for other code!&lt;&#x2F;p&gt;
&lt;p&gt;I’m not claiming that my checks above are the ideal, idiomatic way of writing &lt;code&gt;mean()&lt;&#x2F;code&gt;. I’m not using custom exceptions, and the final check seems gratuitous. With that said, they’re useful to demonstrate error checks and the messages are more helpful than the defaults.&lt;&#x2F;p&gt;
&lt;p&gt;The final line of code is a &lt;strong&gt;return statement&lt;&#x2F;strong&gt; that returns the result of calling &lt;code&gt;sum()&lt;&#x2F;code&gt; on &lt;code&gt;array&lt;&#x2F;code&gt; divided by the length of the array (which is the mean of course).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;return-statements&quot;&gt;Return statements&lt;&#x2F;h2&gt;
&lt;p&gt;As mentioned earlier, functions can return &lt;code&gt;None&lt;&#x2F;code&gt;, one, or more values. Values can be anything including objects, such as &lt;code&gt;List&lt;&#x2F;code&gt;s or even other functions; and primitive values such as &lt;code&gt;int&lt;&#x2F;code&gt; and &lt;code&gt;float&lt;&#x2F;code&gt;. Returning a value is as simple as &lt;code&gt;return value&lt;&#x2F;code&gt; which you can see from &lt;code&gt;mean()&lt;&#x2F;code&gt;. Returning multiple values is as simple too: &lt;code&gt;return value1, value2, valueN&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;A function’s documentation will list possible return values as well as their types. For example, take a look at the documentation for Python’s &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;statistics.html#statistics.mean&quot;&gt;built in mean() function&lt;&#x2F;a&gt; in the statistics library. The documentation says that the function “Return[s] the sample arithmetic mean of &lt;code&gt;data&lt;&#x2F;code&gt; which can be a sequence or iterable” (&lt;code&gt;data&lt;&#x2F;code&gt; is the function’s argument). As a side note, exceptions are not return values.&lt;&#x2F;p&gt;
&lt;p&gt;Functions are allowed to have multiple return statements depending on the the flow of execution. Let’s say, for whatever reason, we wanted a function that calculates the mean but also returns the intermediate work if necessary. The function should also return &lt;code&gt;numpy.nan&lt;&#x2F;code&gt; if the caller goofed and passed in an empty array.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;numpy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;np

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Different name and a new argument 👇
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;mean_intermediate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;show_work&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;):
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# First check if array is an Iterable since we need a sequence of numbers.
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;if not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;isinstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(array, Iterable):
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;TypeError&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Array should be a sequence of numbers.&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)

      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Return nan on empty arrays
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(array) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;:
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# 😮 New return statement!
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;np&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;nan

      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# And finally check if every value in array is either an int or a float.
      # Added more type checks to isinstance 👇
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;if not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;lambda &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;isinstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(x, (&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, np&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;float64, np&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;integer)), array)):
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;TypeError&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;You have to pass in an array of numbers.&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)

      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# 👀 NEW 👀 🙀
      # After all of that we can finally calculate the mean of array
      # We&amp;#39;ll first store the intermediate work in case we need it
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;array_sum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(array)
      array_len &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(array)
      array_mean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;array_sum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;array_len

      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;show_work:
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;array_sum, array_len, array_mean
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;:
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;array_mean
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we have three return statements! The first returns a “not a number” sentinel because a zero length array would lead to a division by zero. The two return statements at the end of the function branch depending on the argument &lt;code&gt;show_work&lt;&#x2F;code&gt;, which should be a &lt;code&gt;bool&lt;&#x2F;code&gt;. If the caller wants to see the “work” then the function returns the summation of &lt;code&gt;array&lt;&#x2F;code&gt;, the length of &lt;code&gt;array&lt;&#x2F;code&gt;, and finally the mean. The return value is implictly a tuple. Callers can receive the return value as a tuple or unpack (destructure) the tuple into multiple parts.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;thread_rng &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;np&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;default_rng&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Fake data
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;fake_ages &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;thread_rng&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;integers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;21&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Mean: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;mean_intermediate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(fake_ages, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;False&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Mean with work as a tuple: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;mean_intermediate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(fake_ages, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;Mean: 13.5
Mean with work as a tuple: (270, 20, 13.5)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first call to &lt;code&gt;mean_intermediate&lt;&#x2F;code&gt; only returns the mean as is clear from the function implementation. The second call returns the tuple of the intermediate work as well as the mean. Callers can store that tuple or unpack it as mentioned above. Let’s take a look at that now.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Unpacking a tuple into individual variables
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;array_sum, array_len, array_mean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;mean_intermediate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(fake_ages, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{array_sum}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{array_len}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{array_mean}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Ignoring individual return values
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;array_sum, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;mean_intermediate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(fake_ages, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;270&#x2F;20 = 13.5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first line of code unpacks the single tuple into three separate variables which is clearer and easier to use. The second &lt;code&gt;mean_intermediate&lt;&#x2F;code&gt; call also unpacks the tuple but ignores some of the return values by assigning them to &lt;code&gt;_&lt;&#x2F;code&gt;, a special Python variable that typically stores the last result of a function call.&lt;&#x2F;p&gt;
&lt;p&gt;To be even more explicit we can return a named tuple instead. Named tuples are just tuples with field names for explicitness.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;collections &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;namedtuple

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Declare a named tuple called MeanCalc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;MeanCalc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;namedtuple&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;MeanCalc&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;summation&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;length&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;mean&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;])

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;mean_intermediate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;show_work&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;):
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Error checking left out for brevity.
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;array_sum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(array)
      array_len &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(array)
      array_mean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;array_sum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;array_len

      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;show_work:
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Returning a named tuple instead 😺
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;MeanCalc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(array_sum, array_len, array_mean)
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;:
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;array_mean

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;As a named tuple: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;mean_intermediate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(fake_ages, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Unpacking works the same 😺
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;array_sum, array_len, array_mean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;mean_intermediate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(fake_ages, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# We can also store the tuple then access each field in a nicer way.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;mean_work_ages &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;mean_intermediate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(fake_ages, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Mean: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;{mean_work_ages&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;mean}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;As a named tuple: MeanCalc(summation=270, length=20, mean=13.5)
Mean: 13.5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Returning named tuples certainly looks nicer!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;default-arguments&quot;&gt;Default arguments&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s say that instead of &lt;code&gt;mean_intermediate()&lt;&#x2F;code&gt; we simply had a single &lt;code&gt;mean()&lt;&#x2F;code&gt; that encapsulated a lot of functionality. Besides returning the intermediate work, our new &lt;code&gt;mean()&lt;&#x2F;code&gt; could calculate the average by precluding &lt;code&gt;nan&lt;&#x2F;code&gt;s or calculate the mean across a dimension. The declaration could look something like this.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;mean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;show_work&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;remove_na&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;):
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;pass
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Callers would have to pass in an array, the axis to calculate across, and two bools to indicate whether the intermediate work should be returned as well as what to do about &lt;code&gt;nan&lt;&#x2F;code&gt;s. For example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;fake_ages_mean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;mean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(fake_ages, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;flat&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;False&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Our new mean would take only four arguments, but what if we expanded the function further? Calculating a mean via our function (or other functions) has reasonable defaults. We can assume that most callers would expect to receive the mean without intermediate work. In other words, most callers would use &lt;code&gt;mean()&lt;&#x2F;code&gt; by &lt;code&gt;show_work&lt;&#x2F;code&gt; set to &lt;code&gt;False&lt;&#x2F;code&gt;. We can also assume callers would usually want the flattened mean of an n-dimensional array. Filling in the last three arguments doesn’t seem like a lot of work, but what if you were deep within a project where you had to exhaustively type out or copy and paste the functional call only to change the first argument?&lt;&#x2F;p&gt;
&lt;p&gt;You’d probably eventually write your own convenience function.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;meen&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;):
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;COME ON MAN!!!&amp;quot;&amp;quot;&amp;quot;
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;mean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(a, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;flat&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;False&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Python has a nifty feature to absolve this tedium. &lt;strong&gt;Default arguments&lt;&#x2F;strong&gt; are preset parameters that reduce function call complexity. Parameters with default arguments are referred to as &lt;strong&gt;keyword arguments&lt;&#x2F;strong&gt; or &lt;strong&gt;named parameters&lt;&#x2F;strong&gt;. Parameters without defaults are known as &lt;strong&gt;positional arguments&lt;&#x2F;strong&gt; and must be provided when the function is called. Some Python libraries expose truly gnarly public functions (neither hyperbole nor an insult). For example, take a look at &lt;a href=&quot;https:&#x2F;&#x2F;seaborn.pydata.org&#x2F;&quot;&gt;Seaborn&lt;&#x2F;a&gt;’s &lt;a href=&quot;https:&#x2F;&#x2F;seaborn.pydata.org&#x2F;generated&#x2F;seaborn.pairplot.html&quot;&gt;pairplot&lt;&#x2F;a&gt; function. Would you really want to fill in each of those parameters by hand for each call?&lt;&#x2F;p&gt;
&lt;p&gt;I am not a masochist—except concerning certain video games—so I’m in favor of reasonable default argument use. Default arguments are great for providing a flexible public API while delegating work to private functions which is likely how some of the longer functions handle default arguments.&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, adding default arguments to a function is as simple as setting &lt;code&gt;argument=default_value&lt;&#x2F;code&gt; in the declaration.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Default arguments are set with an equals.
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;mean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;flat&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;show_work&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;False&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;remove_na&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;):
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;pass

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Now mean is easier to call! 👍
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;mean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(fake_ages)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The new declaration above adds default arguments for &lt;code&gt;by&lt;&#x2F;code&gt;, &lt;code&gt;show_work&lt;&#x2F;code&gt;, and &lt;code&gt;remove_na&lt;&#x2F;code&gt;. Calling &lt;code&gt;mean()&lt;&#x2F;code&gt; by simply passing in an array defaults to taking the mean of a flattened array without showing work but &lt;em&gt;with&lt;&#x2F;em&gt; removing &lt;code&gt;nan&lt;&#x2F;code&gt;s. Notice that I didn’t provide a default argument for &lt;code&gt;array&lt;&#x2F;code&gt;. &lt;code&gt;array&lt;&#x2F;code&gt; is a positional argument that callers must always provide. Logically, providing a default for &lt;code&gt;array&lt;&#x2F;code&gt; doesn’t make sense because the entire purpose of the function is to calculate a mean for &lt;code&gt;array&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Add a default argument for &lt;code&gt;show_work&lt;&#x2F;code&gt; to &lt;code&gt;mean_intermediate&lt;&#x2F;code&gt; as an exercise.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;positional-keyword-and-default-arguments&quot;&gt;Positional, keyword, and default arguments&lt;&#x2F;h3&gt;
&lt;p&gt;Arguments match up by position for function calls which you already know even if you haven’t heard it formally. In other words, calling a function like so:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;some_cool_function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;first_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
                       &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;second_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
                       &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;third_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
                       &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;fourth_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
                       &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;fifth_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;):
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;pass

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Arguments are passed in by position and thus match up to each arg
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;some_cool_function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;…passes in 1, 2, 3, 4, and 5 to the &lt;code&gt;first_arg&lt;&#x2F;code&gt;, &lt;code&gt;second_arg&lt;&#x2F;code&gt;, &lt;code&gt;third_arg&lt;&#x2F;code&gt;, &lt;code&gt;fourth_arg&lt;&#x2F;code&gt;, and &lt;code&gt;fifth_arg&lt;&#x2F;code&gt; parameters by position.&lt;&#x2F;p&gt;
&lt;p&gt;I can also call &lt;code&gt;some_cool_function&lt;&#x2F;code&gt; by manually labeling each argument. I can also refer to them out of order.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# In order
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;some_cool_function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;first_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
                   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;second_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
                   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;third_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
                   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;fourth_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
                   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;fifth_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Out of order! 🤯🤯
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;some_cool_function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;second_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
                   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;first_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
                   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;fourth_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
                   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;third_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
                   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;fifth_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Mixed positional and keywords 🤯🤯🤯🤯
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;some_cool_function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
                   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
                   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;third_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
                   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;fourth_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
                   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;fifth_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The three code snippets above show different ways of calling &lt;code&gt;some_cool_function&lt;&#x2F;code&gt;. You can explicitly refer to each argument by name as shown in the first and second calls. This is known as keyword arguments or named parameters as mentioned above.&lt;&#x2F;p&gt;
&lt;p&gt;The second call refers to the arguments out of order. The third call mixes positional as well as keyword arguments. Notice that I supplied the positional arguments first in the mixed call. Keyword arguments &lt;strong&gt;always appear after positional arguments.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# This is ILLEGAL and you&amp;#39;re going to be arrested by the Python police.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;some_cool_function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
                   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
                   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;third_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
                   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
                   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Allowing mixing positional and keyword arguments without mandating that positional arguments come first would lead to ambiguous calls. There is no “right” way to handle mixing the order of positional and keyword arguments. Likewise, you can’t provide a positional argument and a keyword argument that refers to the same parameter. This is easier to understand with an example.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Do you hear that?
# It&amp;#39;s the hiss of the Python police&amp;#39;s blue-yellow siren.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;some_cool_function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
                   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;first_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
                   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;second_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
                   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;third_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
                   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;fourth_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
                   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;fifth_arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;first_arg&lt;&#x2F;code&gt; is provided twice which is also illegal. I can’t think of a reason why you’d supply an argument twice in the same call so it’s for the best that Python throws an error here.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Do these rules seem confusing or verbose?&lt;&#x2F;strong&gt; Don’t worry! After coding in Python for a few days you’ll likely “get” these rules without having to memorize them. I personally haven’t really thought about them till writing this tutorial. The main takeaways are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Callers can specifically supply arguments by name&lt;&#x2F;li&gt;
&lt;li&gt;Positional arguments always come before keyword arguments&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Default arguments can be overridden as both positional or keyword arguments.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Override show_work only
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;mean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(fake_ages, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;show_work&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Override by and show_work by position
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;mean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(thread_rng&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;row&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;variance-and-standard-deviation-via-composition&quot;&gt;Variance and standard deviation via composition&lt;&#x2F;h2&gt;
&lt;p&gt;We’re at the end of the first part of my brief tutorial on writing functions in Python. For our last steps, we’ll implement variance and standard deviation while demonstrating composability. I’ll use a slightly modified version of the first mean function from earlier on to limit some of the busy work since we’re crafting an A.P.I.&lt;&#x2F;p&gt;
&lt;p&gt;Recall that the original mean function looked more or less like so:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;mean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;):
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# First check if array is an Iterable since we need a sequence of numbers.
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;if not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;isinstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(array, Iterable):
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;TypeError&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Array should be a sequence of numbers.&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)

      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Return nan on empty arrays
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(array) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;:
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;np&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;nan

      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# And finally check if every value in array is either an int or a float.
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;if not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;lambda &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;isinstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(x, (&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, np&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;float64, np&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;integer)), array)):
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;TypeError&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;You have to pass in an array of numbers.&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)

      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# After all of that we can finally return the mean of array.
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(array)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(array)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Variance relies on the mean so we can call &lt;code&gt;mean&lt;&#x2F;code&gt; directly in our new function.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Finally! A different topic.
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;variance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;):
     array_mean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;mean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(array)
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;([(xi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;array_mean)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;xi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;array])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(array)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Standard deviation is the square root of variance thus we can call &lt;code&gt;variance()&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Reusing variance() is eco friendly.
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;):
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;variance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(array)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Since &lt;code&gt;array&lt;&#x2F;code&gt; is passed down to &lt;code&gt;mean()&lt;&#x2F;code&gt;, any errors would also be raised in &lt;code&gt;variance()&lt;&#x2F;code&gt; as well as &lt;code&gt;std()&lt;&#x2F;code&gt;. However, what if we were implementing another formula, such as residual sum of squares, where we’d want &lt;code&gt;ŷ&lt;&#x2F;code&gt;and &lt;code&gt;y&lt;&#x2F;code&gt; to both be arrays of numbers as well? Simply copying and pasting the code is unacceptable for reasons discussed earlier. We’d increase code bloat as well as reduce maintainability.&lt;&#x2F;p&gt;
&lt;p&gt;An easy solution is to write another function for the error handling and dispatching the public facing (A.P.I.) functions to internal implementations. This is another set of ideas that sounds more difficult in words than in code.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Notice the underline before the names of the functions below! 👍
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;_is_array_of_nums&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;):
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# First check if array is an Iterable since we need a sequence of numbers.
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;if not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;isinstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(array, Iterable):
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;TypeError&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Array should be a sequence of numbers.&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Return nan on empty arrays
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(array) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;:
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;np&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;nan

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# And finally check if every value in array is either an int or a float.
    # This check may be gratuitous.
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;if not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;lambda &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;isinstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(x, (&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
                                            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;,
                                            np&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;float64,
                                            np&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;integer)),
                   array)):
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;TypeError&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;You have to pass in an array of numbers.&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;_mean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;):
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Return the mean of array (unchecked)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(array)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(array)


&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;_variance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;):
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Unchecked variance
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;array_mean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;_mean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(array)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;([(xi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;array_mean)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;xi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;array])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(array)


&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;_std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;):
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Unchecked standard deviation
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;_variance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(array)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Python lacks language features for &lt;em&gt;private&lt;&#x2F;em&gt; or &lt;em&gt;protected&lt;&#x2F;em&gt; functions and methods. Conventionally, functions with a preceding underscore, such as &lt;code&gt;_mean()&lt;&#x2F;code&gt;, are taken to be implementation details that normal users shouldn’t access.&lt;&#x2F;p&gt;
&lt;p&gt;I defined four private functions. I moved the error checking logic into the first, &lt;code&gt;_is_array_of_nums()&lt;&#x2F;code&gt;. The other three functions perform the calculations at hand without error checking.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;mean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;):
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;_is_array_of_nums&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(array)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;_mean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(array)


&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;variance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;):
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;_is_array_of_nums&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(array)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;_variance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(array)


&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff79c6;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;):
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;_is_array_of_nums&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(array)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;_std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(array)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The final set of functions dispatches each calculation to the private function. Error checking is only performed once.&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
